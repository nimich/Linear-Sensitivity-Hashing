{"paragraphs":[{"text":"%md\n### Customer VBM index prediction\n\nFirst try with Spark MlLib.\n\nTry to predict VBM label index from customer data. Use customer data located in hadoop.\nModel used is a decision tree with gini index but can easily migrated to all MlLib models\n","dateUpdated":"2017-11-16T14:56:45+0200","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Customer VBM index prediction</h3>\n<p>First try with Spark MlLib.</p>\n<p>Try to predict VBM label index from customer data. Use customer data located in hadoop.<br/>Model used is a decision tree with gini index but can easily migrated to all MlLib models</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510837005217_-887598597","id":"20171107-154518_949338744","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3503"},{"title":"Importing libraries & reading data","text":"%pyspark\nfrom pyspark import SparkConf, SparkContext\nfrom pyspark.sql import SQLContext\nfrom pyspark.sql.types import *\nfrom pyspark.sql.functions import isnan, when, count, col ,max \n\nfrom pyspark.ml.feature import StringIndexer\nfrom pyspark.ml.feature import IndexToString\n\nfrom pyspark.mllib.linalg import Vectors\nfrom pyspark.mllib.regression import LabeledPoint\nfrom pyspark.mllib.tree import DecisionTree\n\nfrom __future__ import print_function\nfrom __future__ import division\t\nimport sys\n\nprint(\"Working in Spark \",sc.version)\n\ndfRaw = spark.read.csv(\"hdfs:/user/dataMl/CustRawSample.csv\",header=True)\n#dfRaw = spark.read.csv(\"hdfs://perfman11:8020/user/dataMl/CustRawSample.csv\",header=True)\n\nunwanted = ['CustomerCRS','ProfessionName2','ProfessionName3','CompanyType', 'IndustryName4', 'ExportationFlag', 'ChildrenRange',\n'ORG_TAX_STRACTURE', 'IndustryName1', 'Winbank Segment', 'IndustryName5', 'GovType',\n'VBM_AGR', 'MiFid', 'LegalType', 'CustomerBucket', 'extranetFlag', 'OrgRevenueRanges', 'Organizations Category']\n\n#Drop previously found high NA columns\ndf = dfRaw.select([c for c in dfRaw.columns if c not in unwanted])\ndf = df.na.drop(how='any')\n","user":"anonymous","dateUpdated":"2017-11-17T15:52:16+0200","config":{"enabled":true,"tableHide":false,"title":true,"editorMode":"ace/mode/python","results":{},"editorHide":false,"editorSetting":{"language":"python"},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Working in Spark  2.1.0.cloudera2\n"}]},"apps":[],"jobName":"paragraph_1510837005218_-886444350","id":"20171107-151443_1312595548","dateCreated":"2017-11-16T14:56:45+0200","dateStarted":"2017-11-17T15:52:16+0200","dateFinished":"2017-11-17T15:52:24+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3504"},{"title":"Counting VMB percentages","text":"%pyspark\n\nfrom __future__ import print_function\n\n#See the percentages for each VBM class\n#Very Impalanced dateset almost 70% belongs to the same class\ndfSize =  df.count()\npercVBM = df.groupBy('VBM').count().collect()\nsortedVBM = sorted(percVBM, key=lambda tup: tup[1] , reverse=True)\n\nschema = StructType([\n    StructField(\"VBM\", StringType(), True),\n    StructField(\"Count\", StringType(), True),\n])\n\ndata_converted = sc.parallelize(sortedVBM).map(lambda x: (x[0], x[1]))\n\nsts = sqlContext.createDataFrame(data_converted,schema).registerTempTable(\"stats\")","user":"anonymous","dateUpdated":"2017-11-17T15:52:29+0200","config":{"enabled":true,"title":true,"editorMode":"ace/mode/python","results":{},"editorHide":false,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1510837005218_-886444350","id":"20171107-121718_1176433023","dateCreated":"2017-11-16T14:56:45+0200","dateStarted":"2017-11-17T15:52:29+0200","dateFinished":"2017-11-17T15:52:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3505"},{"text":"%md\n\nWe we need to check percentages fro each class beacuse unalanced datasets will create problems.\nNeed for balanced resampling or adjusting probabilities\n\nWe see from the next graph that VBM is indeed unbalanced","dateUpdated":"2017-11-16T14:56:45+0200","config":{"enabled":true,"tableHide":false,"editorMode":"ace/mode/markdown","results":{},"editorHide":true,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<p>We we need to check percentages fro each class beacuse unalanced datasets will create problems.<br/>Need for balanced resampling or adjusting probabilities</p>\n<p>We see from the next graph that VBM is indeed unbalanced</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1510837005219_-886829099","id":"20171107-154720_1718502987","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3506"},{"title":"VBM index percentages ","text":"%sql\n\nselect VBM, Count from stats \n","dateUpdated":"2017-11-17T16:51:15+0200","config":{"enabled":true,"tableHide":false,"title":true,"editorMode":"ace/mode/sql","results":{"0":{"graph":{"mode":"pieChart","height":358,"optionOpen":false},"helium":{}}},"editorHide":false,"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"VBM\tCount\nΙδιώτες Λιανικής Τραπεζικής\t39051\nΜικρές Επιχειρήσεις και Επαγγελματίες\t7696\nΙδιώτες Μονάδας Recovery\t3826\nΕύποροι Πελάτες\t2296\nΠελάτες Αγροτικού Τομέα\t608\nΠελάτες Private Banking\t116\nΕπιχειρηματικοί Πελάτες σε Οριστική Καθυστέρηση\t107\nΜικρές Επιχειρήσεις και Επαγγελματίες Μονάδας Recovery\t27\nΠελάτες Αγροτικού Τομέα Μονάδας Recovery\t18\nΜικρομεσαίες Επιχειρήσεις\t11\nΜικρομεσαίες Επιχειρήσεις Μονάδας Recovery\t7\nΜεγάλες Επιχειρήσεις Μονάδας Recovery\t2\n"}]},"apps":[],"jobName":"paragraph_1510837005219_-886829099","id":"20171107-122422_52828354","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3507"},{"title":"Data Preparation","text":"%pyspark\n\nfrom __future__ import print_function\n\n#Encode all categorical values to numbers\nfor col in df.columns:\n\tnewColName = str(col+\"categoryIndex\") \n\tindexer = StringIndexer(inputCol=col, outputCol=newColName)\n\tdf = indexer.setHandleInvalid(\"skip\").fit(df).transform(df)\n\tdf = df.drop(col)\n\tdf = df.withColumnRenamed(newColName, col)\n\t\n#Reverse th process and take original labels to index mapping\nconverter = IndexToString(inputCol='VBM', outputCol=\"originalCategory\")\nconverted = converter.transform(df.select('VBM'))\n\n#Show 20 rows of the mapping with no truncate\nprint(\"VBM encoding \")\nconverted.distinct().show(20,False) \n\n#Reorder with proper order - Some columns have spaces\norderCols = ['VBM' , 'CustomerRelType', 'CustomerRelStatus', 'Customer Activity Status', 'CustomerType',\n\t\t\t'CategGroup', 'CustomerMarketSegment', 'Business Segment', 'NodeNamev', \n\t\t\t'CITIZENSHIP_COUNTRY', 'RESIDENCE_COUNTRY', 'CrossSell', 'NATIONALITY_COUNTRY',\n\t\t\t'DTHFLG', 'MaritalStatus', 'Gender', 'EducationLevel', 'IdvAgeRange_NEW', \n\t\t\t'ProfessionStatus', 'ProfessionName1']\n\t\t\ndf = df.select([col for col in orderCols])\n\n","dateUpdated":"2017-11-17T16:50:31+0200","config":{"enabled":true,"title":true,"tableHide":false,"editorMode":"ace/mode/python","results":{"0":{"graph":{"mode":"table","height":307.38,"optionOpen":false}}},"editorHide":false,"editorSetting":{"language":"python"},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"VBM encoding \n+----+------------------------------------------------------+\n|VBM |originalCategory                                      |\n+----+------------------------------------------------------+\n|8.0 |Πελάτες Αγροτικού Τομέα Μονάδας Recovery              |\n|5.0 |Πελάτες Private Banking                               |\n|6.0 |Επιχειρηματικοί Πελάτες σε Οριστική Καθυστέρηση       |\n|7.0 |Μικρές Επιχειρήσεις και Επαγγελματίες Μονάδας Recovery|\n|2.0 |Ιδιώτες Μονάδας Recovery                              |\n|10.0|Μικρομεσαίες Επιχειρήσεις Μονάδας Recovery            |\n|0.0 |Ιδιώτες Λιανικής Τραπεζικής                           |\n|9.0 |Μικρομεσαίες Επιχειρήσεις                             |\n|11.0|Μεγάλες Επιχειρήσεις Μονάδας Recovery                 |\n|3.0 |Εύποροι Πελάτες                                       |\n|4.0 |Πελάτες Αγροτικού Τομέα                               |\n|1.0 |Μικρές Επιχειρήσεις και Επαγγελματίες                 |\n+----+------------------------------------------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1510837005219_-886829099","id":"20171107-131745_2084087050","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3508"},{"title":"Splitting dataset to train and test","text":"%pyspark\n\nfrom __future__ import print_function\n\n#Create a labelled point rdd needed for MLib\nlpRdd = df.rdd.map(lambda x : LabeledPoint(x[0], Vectors.dense(x[1:])))\n\n#Found the number of classes needed\nnumClass = len(lpRdd.map(lambda x: (x.label, x.features)).countByKey())\nprint(\"Data set has \", lpRdd.count(),\"elements with\" ,numClass,\"classes\\n\")\n\n#Spit in train and test sets\n(train_data, test_data) = lpRdd.randomSplit([0.80, 0.20],seed=1234)\n\n#Cache the set. This is needed because it handles a bug occured later\ntrain_data.cache()\nprint(\"Train set has \", train_data.count(),\"elements\")\ntest_data.cache()\nprint(\"Test set has \", test_data.count(),\"elements\")","dateUpdated":"2017-11-16T14:56:45+0200","config":{"enabled":true,"title":true,"editorMode":"ace/mode/python","results":{},"editorHide":false,"editorSetting":{"language":"python"},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Data set has  53765 elements with 12 classes\n\nTrain set has  42877 elements\nTest set has  10888 elements\n"}]},"apps":[],"jobName":"paragraph_1510837005220_-888752843","id":"20171107-162333_1945892576","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3509"},{"title":"Train the model and print train and test error","text":"%pyspark\r\n\r\nfrom __future__ import print_function\r\n\r\n#Train model\r\nmodel = DecisionTree.trainClassifier(train_data, numClasses=numClass, categoricalFeaturesInfo={},\\\r\nimpurity='gini', maxDepth=8, maxBins=32)\r\n\r\n#Accuracy in Test set \r\npredictionsTest = model.predict(test_data.map(lambda x: x.features))\r\nlabelsAndPredictionsTest = test_data.map(lambda lp: lp.label).zip(predictionsTest)\r\naccurTest = (labelsAndPredictionsTest.filter(lambda lp: lp[0] == lp[1]).count() / float(test_data.count()) )\r\nprint(\"Accuracy in Test set is \",accurTest)\r\n\r\n#Accuracy in Train set \r\npredictionsTrain = model.predict(train_data.map(lambda x: x.features))\r\nlabelsAndPredictionsTrain = train_data.map(lambda lp: lp.label).zip(predictionsTrain)\r\naccurTrain = (labelsAndPredictionsTrain.filter(lambda lp: lp[0] == lp[1]).count() / float(train_data.count()) )\r\nprint(\"Accuracy in Train Set (insample) is \", accurTrain )","dateUpdated":"2017-11-16T14:56:45+0200","config":{"enabled":true,"title":true,"editorMode":"ace/mode/python","results":{},"editorHide":false,"editorSetting":{"language":"python","editOnDblClick":false},"colWidth":12},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Accuracy in Test set is  0.922759000735\nAccuracy in Train Set (insample) is  0.927000489773\n"}]},"apps":[],"jobName":"paragraph_1510837005220_-888752843","id":"20171107-154930_1687724728","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3510"},{"dateUpdated":"2017-11-16T14:56:45+0200","config":{"enabled":true,"editorMode":"ace/mode/scala","results":{},"editorSetting":{"language":"scala"},"colWidth":12},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1510837005221_-889137592","id":"20171107-155812_752472022","dateCreated":"2017-11-16T14:56:45+0200","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3511"}],"name":"ML_Notes/Ml_Model_VBM_index","id":"2CXN52BYT","angularObjects":{"2CXP31JSE:shared_process":[],"2CYB1HHJ4:shared_process":[],"2CZF6JVC1:shared_process":[],"2CY7CFE17:shared_process":[],"2CX1RXWR7:shared_process":[],"2CWR1PMH3:shared_process":[],"2CYZYPE2R:shared_process":[],"2CWZU64RA:shared_process":[],"2CVK5FC2Y:shared_process":[],"2CXZ32WNH:shared_process":[],"2CWNXYEJ1:shared_process":[],"2CWEQXUKW:shared_process":[],"2CYR3FJ9G:shared_process":[],"2CWN43V2U:shared_process":[],"2CX948AUE:shared_process":[],"2CW2N9PP9:shared_process":[],"2CZ1RH4G4:shared_process":[],"2CVQ6MHSG:shared_process":[],"2CX38W5BT:shared_process":[]},"config":{"looknfeel":"simple","personalizedMode":"false"},"info":{}}